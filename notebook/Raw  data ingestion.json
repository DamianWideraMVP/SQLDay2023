{
	"name": "Raw  data ingestion",
	"properties": {
		"folder": {
			"name": "01_Load_raw_data"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smallpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e78d3743-d8ef-4cc4-9d86-0f0a522b4be9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
				"name": "smallpool",
				"type": "Spark",
				"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\r\n",
					"import requests\r\n",
					"import pandas as pd\r\n",
					"import zipfile\r\n",
					"import io\r\n",
					"from datetime import datetime, timedelta"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#(bronze)sas_token = f'sp=racwdlmeop&st=2023-05-03T11:20:20Z&se=2023-05-31T19:20:20Z&spr=https&sv=2021-12-02&sr=c&sig=SITj%2FKFPa%2FTLJgawl6TeqABXjTpimz9WcH62TPyxKss%3D'\r\n",
					"sas_token = f'sp=racwdlmeop&st=2023-05-03T21:02:46Z&se=2023-05-31T05:02:46Z&spr=https&sv=2021-12-02&sr=c&sig=8CY7pN26Rsto5wDJoYUM4RzofvxNaozEwpZWARTqVs0%3D'\r\n",
					"account = 'https://sqlday2023.blob.core.windows.net'\r\n",
					"url_base = 'http://data.gdeltproject.org/events/'\r\n",
					"unizpped_container = 'raw'\r\n",
					"file_extension = 'csv'"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_blob_service_client_sas( account, sas_token):\r\n",
					"    account_url = account\r\n",
					"    credential = sas_token\r\n",
					"    blob_service_client = BlobServiceClient(account_url, credential=credential)\r\n",
					"\r\n",
					"    return blob_service_client"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def send_data_to_blob (container_client: ContainerClient, fileName:str):\n",
					"    url = url_base+fileName\n",
					"\n",
					"\n",
					"    print (f'url: {url}')\n",
					"\n",
					"    file = fileName.split('.')[0]\n",
					"    file_to_save = file +'.'+file_extension\n",
					"\n",
					"    r = requests.get(url, allow_redirects=True)\n",
					"    zipDocument = zipfile.ZipFile(io.BytesIO(r.content))  \n",
					"    \n",
					"    listOfFileNames = zipDocument.namelist()\n",
					"\n",
					"    for file in listOfFileNames:\n",
					"        tmp = zipDocument.extract(file)\n",
					"        print (f'file: {file}, p={tmp}')\n",
					"\n",
					"        f = open (tmp,\"r\")\n",
					"        content = f.read()\n",
					"\n",
					"        blob_client = container_client.upload_blob(name=file, data=content, overwrite=True, blob_type=\"BlockBlob\")"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _create_nested_container_client(blob_service_client: BlobServiceClient, container_name: str, subfolder: str):\n",
					"    new_name_for_container = container_name + \"/\" + subfolder[0:6]\n",
					"    return blob_service_client.get_container_client(container=new_name_for_container)\n",
					"    \n",
					"    "
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upload_blob_file_for_dates(blob_service_client: BlobServiceClient, container_name: str, date_start:str, date_end:str):\n",
					"    '''date_start and date_end in format YYYY-MM-DD'''\n",
					"\n",
					"    for dt in pd.period_range(start=date_start, end=date_end, freq='D'):\n",
					"        dt_str = str(dt).replace(\"-\",\"\")+'.export.CSV.zip'\n",
					"\n",
					"        container_client = _create_nested_container_client(blob_service_client, container_name, dt_str)\n",
					"        \n",
					"        send_data_to_blob(container_client,dt_str)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upload_last_X_days(blob_service_client: BlobServiceClient, container_name: str, days: int):\n",
					"    \n",
					"    end_date = (datetime.today() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n",
					"    start_date = (datetime.today() - timedelta(days=days)).strftime(\"%Y-%m-%d\")\n",
					"\n",
					"    upload_blob_file_for_dates(blob_service_client, container_name,start_date,end_date )\n",
					"\n",
					"\n",
					""
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"bsc = get_blob_service_client_sas(account,sas_token)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"upload_blob_file_for_dates(bsc,unizpped_container,'2023-03-24','2023-03-31')"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"upload_last_X_days(bsc,unizpped_container,7)"
				],
				"execution_count": 24
			}
		]
	}
}