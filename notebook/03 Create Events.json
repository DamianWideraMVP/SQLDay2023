{
	"name": "03 Create Events",
	"properties": {
		"folder": {
			"name": "02 Load to Delta"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smallpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "11423ae7-6015-4e60-b359-eddfa5c81394"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
				"name": "smallpool",
				"type": "Spark",
				"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\r\n",
					"\r\n",
					"from pyspark.sql.functions import monotonically_increasing_id, col, regexp_replace, upper, trim\r\n",
					"from delta.tables import DeltaTable"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"src_location = 'abfss://bronze@sqlday2023.dfs.core.windows.net/gdeltevents/20*/*/gdelt_events.parquet'\r\n",
					"## dst_location = 'abfss://silver@sqlday2023.dfs.core.windows.net/gdeltevents/event'\r\n",
					"dst_location = 'abfss://bronze@sqlday2023.dfs.core.windows.net/gdeltevents/eventnokeys'\r\n",
					"## dst_eventa_location = 'abfss://silver@sqlday2023.dfs.core.windows.net/gdeltevents/eventa'\r\n",
					"## dst_eventag_location = 'abfss://silver@sqlday2023.dfs.core.windows.net/gdeltevents/eventag'\r\n",
					"\r\n",
					"## actor_location = 'abfss://silver@sqlday2023.dfs.core.windows.net/gdeltevents/actor'\r\n",
					"## geo_location = 'abfss://silver@sqlday2023.dfs.core.windows.net/gdeltevents/geo'\r\n",
					""
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_all_events = spark.read.parquet(src_location)\r\n",
					"\r\n",
					"event_columns = ['GlobalEventID'\r\n",
					",'Day'\r\n",
					",'Actor1Code'\r\n",
					",'Actor1Name'\r\n",
					",'Actor2Code'\r\n",
					",'Actor2Name'\r\n",
					",'IsRootEvent'\r\n",
					",'EventCode'\r\n",
					",'EventBaseCode'\r\n",
					",'EventRootCode'\r\n",
					",'QuadClass'\r\n",
					",'GoldsteinScale'\r\n",
					",'NumMentions'\r\n",
					",'NumSources'\r\n",
					",'NumArticles'\r\n",
					",'AvgTone'\r\n",
					",'Actor1Geo_ADM1Code'\r\n",
					",'Actor1Geo_Lat'\r\n",
					",'Actor1Geo_Long'\r\n",
					",'Actor1Geo_FeatureID'\r\n",
					",'Actor2Geo_ADM1Code'\r\n",
					",'Actor2Geo_Lat'\r\n",
					",'Actor2Geo_Long'\r\n",
					",'Actor2Geo_FeatureID'\r\n",
					",'ActionGeo_ADM1Code'\r\n",
					",'ActionGeo_Lat'\r\n",
					",'ActionGeo_Long'\r\n",
					",'ActionGeo_FeatureID'\r\n",
					",'DATEADDED'\r\n",
					",'SOURCEURL']\r\n",
					"\r\n",
					"df_event1 = df_all_events.select(event_columns)"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_event2 = df_event1.withColumn('Actor1Code', upper(trim(col('Actor1Code')))).withColumn('Actor1Name', trim(col('Actor1Name'))).withColumn('Actor2Code', upper(trim(col('Actor2Code')))).withColumn('Actor2Name', trim(col('Actor2Name')))"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_event3 = df_event2.withColumn('Actor1Geo_Lat', regexp_replace(col('Actor1Geo_Lat'), '[^0-9\\\\-.]', '')).withColumn('Actor1Geo_Long', regexp_replace(col('Actor1Geo_Long'), '[^0-9\\\\-.]', ''))"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_event4 = df_event3.withColumn('Actor2Geo_Lat', regexp_replace(col('Actor2Geo_Lat'), '[^0-9\\\\-.]', '')).withColumn('Actor2Geo_Long', regexp_replace(col('Actor2Geo_Long'), '[^0-9\\\\-.]', ''))"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df_event5 = df_event4.withColumn('ActionGeo_Lat', regexp_replace(col('ActionGeo_Lat'), '[^0-9\\\\-.]', '')).withColumn('ActionGeo_Long', regexp_replace(col('ActionGeo_Long'), '[^0-9\\\\-.]', ''))\r\n",
					"\r\n",
					"display(df_event5.limit(10))"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"db = \"gdeltdb\""
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _drop_gdelt_database(db: str):\r\n",
					"    str = f\"DROP DATABASE IF EXISTS {db} CASCADE\"\r\n",
					"    spark.sql(str)\r\n",
					""
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"_drop_gdelt_database(db)"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _create_gdelt_database(db: str):\r\n",
					"    _drop_gdelt_database(db)\r\n",
					"\r\n",
					"    str = f\"CREATE DATABASE IF NOT EXISTS {db}\"\r\n",
					"    spark.sql(str)\r\n",
					"\r\n",
					"    str = f\"USE {db}\"\r\n",
					"    spark.sql(str)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"_create_gdelt_database(db)"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df_event5.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(dst_location)\r\n",
					"display(df_event5.limit(10), True)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _drop_table (folder: str):\r\n",
					"    \r\n",
					"    str = f\"DROP TABLE IF EXISTS {folder}; \"\r\n",
					"    spark.sql(str)\r\n",
					"    "
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _create_table (folder: str, path_to_table:str):\r\n",
					"    \r\n",
					"    _drop_table(folder)\r\n",
					"    \r\n",
					"    str = f\"CREATE TABLE {folder} \\\r\n",
					"    USING delta \\\r\n",
					"    location '{path_to_table}'\"\r\n",
					"\r\n",
					"    spark.sql(str)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"_create_table (\"eventnokeyes\", dst_location)\r\n",
					""
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_event5.createOrReplaceTempView('EventNoKeysSrc')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"## full reload\r\n",
					"delta_table = DeltaTable.forPath(spark, dst_location)\r\n",
					"delta_table.delete()\r\n",
					"delta_table.vacuum()"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_event5.write.option(\"path\", dst_location).format(\"delta\").mode('overwrite').save()"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_actor = spark.read.format('delta').load(actor_location)\r\n",
					"df_geo = spark.read.format('delta').load(geo_location)\r\n",
					"\r\n",
					"df_actor.createOrReplaceTempView('Actor')\r\n",
					"df_geo.createOrReplaceTempView('Geo')"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_event5.createOrReplaceTempView('EventNoKeys')"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM EventNoKeys\r\n",
					"LIMIT 10"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT GlobalEventID\r\n",
					"        ,Day\r\n",
					"        ,a1.ActorID AS Actor1ID\r\n",
					"        ,Actor1Code\r\n",
					"        ,Actor1Name\r\n",
					"        ,Actor2Code\r\n",
					"        ,Actor2Name\r\n",
					"        ,IsRootEvent\r\n",
					"        ,EventCode\r\n",
					"        ,EventBaseCode\r\n",
					"        ,EventRootCode\r\n",
					"        ,QuadClass\r\n",
					"        ,GoldsteinScale\r\n",
					"        ,NumMentions\r\n",
					"        ,NumSources\r\n",
					"        ,NumArticles\r\n",
					"        ,AvgTone\r\n",
					"        ,Actor1Geo_ADM1Code\r\n",
					"        ,Actor1Geo_Lat\r\n",
					"        ,Actor1Geo_Long\r\n",
					"        ,Actor1Geo_FeatureID\r\n",
					"        ,Actor2Geo_ADM1Code\r\n",
					"        ,Actor2Geo_Lat\r\n",
					"        ,Actor2Geo_Long\r\n",
					"        ,Actor2Geo_FeatureID\r\n",
					"        ,ActionGeo_ADM1Code\r\n",
					"        ,ActionGeo_Lat\r\n",
					"        ,ActionGeo_Long\r\n",
					"        ,ActionGeo_FeatureID\r\n",
					"        ,DATEADDED\r\n",
					"        ,SOURCEURL\r\n",
					"    FROM EventNoKeys e\r\n",
					"    LEFT JOIN Actor a1\r\n",
					"        ON e.Actor1Code = a1.ActorCode\r\n",
					"        AND e.Actor1Name = a1.ActorName\r\n",
					"    LIMIT 10"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df_events_wactorkeys = spark.sql(\"\"\"SELECT GlobalEventID\r\n",
					"        ,Day\r\n",
					"        ,a1.ActorID AS Actor1ID\r\n",
					"        ,Actor2Code\r\n",
					"        ,Actor2Name\r\n",
					"        ,IsRootEvent\r\n",
					"        ,EventCode\r\n",
					"        ,EventBaseCode\r\n",
					"        ,EventRootCode\r\n",
					"        ,QuadClass\r\n",
					"        ,GoldsteinScale\r\n",
					"        ,NumMentions\r\n",
					"        ,NumSources\r\n",
					"        ,NumArticles\r\n",
					"        ,AvgTone\r\n",
					"        ,Actor1Geo_ADM1Code\r\n",
					"        ,Actor1Geo_Lat\r\n",
					"        ,Actor1Geo_Long\r\n",
					"        ,Actor1Geo_FeatureID\r\n",
					"        ,Actor2Geo_ADM1Code\r\n",
					"        ,Actor2Geo_Lat\r\n",
					"        ,Actor2Geo_Long\r\n",
					"        ,Actor2Geo_FeatureID\r\n",
					"        ,ActionGeo_ADM1Code\r\n",
					"        ,ActionGeo_Lat\r\n",
					"        ,ActionGeo_Long\r\n",
					"        ,ActionGeo_FeatureID\r\n",
					"        ,DATEADDED\r\n",
					"        ,SOURCEURL\r\n",
					"    FROM EventNoKeys e\r\n",
					"    LEFT JOIN Actor a1\r\n",
					"        ON e.Actor1Code = a1.ActorCode\r\n",
					"        AND e.Actor1Name = a1.ActorName\r\n",
					"    LIMIT 10\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"## df_events_wactorkeys.createOrReplaceTempView('EventNoGeoKeys1')\r\n",
					"\r\n",
					"display(df_events_wactorkeys)"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_events_wactorkeys = spark.sql(\"\"\"SELECT GlobalEventID\r\n",
					"        ,Day\r\n",
					"        ,a1.ActorID AS Actor1ID\r\n",
					"        ,a2.ActorID AS Actor2ID\r\n",
					"        ,IsRootEvent\r\n",
					"        ,EventCode\r\n",
					"        ,EventBaseCode\r\n",
					"        ,EventRootCode\r\n",
					"        ,QuadClass\r\n",
					"        ,GoldsteinScale\r\n",
					"        ,NumMentions\r\n",
					"        ,NumSources\r\n",
					"        ,NumArticles\r\n",
					"        ,AvgTone\r\n",
					"        ,Actor1Geo_ADM1Code\r\n",
					"        ,Actor1Geo_Lat\r\n",
					"        ,Actor1Geo_Long\r\n",
					"        ,Actor1Geo_FeatureID\r\n",
					"        ,Actor2Geo_ADM1Code\r\n",
					"        ,Actor2Geo_Lat\r\n",
					"        ,Actor2Geo_Long\r\n",
					"        ,Actor2Geo_FeatureID\r\n",
					"        ,ActionGeo_ADM1Code\r\n",
					"        ,ActionGeo_Lat\r\n",
					"        ,ActionGeo_Long\r\n",
					"        ,ActionGeo_FeatureID\r\n",
					"        ,DATEADDED\r\n",
					"        ,SOURCEURL\r\n",
					"    FROM EventNoKeys e\r\n",
					"    LEFT JOIN Actor a1\r\n",
					"        ON e.Actor1Code = a1.ActorCode\r\n",
					"        AND e.Actor1Name = a1.ActorName\r\n",
					"    LEFT JOIN Actor a2\r\n",
					"        ON e.Actor2Code = a2.ActorCode\r\n",
					"        AND e.Actor2Name = a2.ActorName\r\n",
					"    LEFT JOIN Geo ga1\r\n",
					"        ON e.Actor1Geo_Lat = ga1.Geo_Lat\r\n",
					"        AND e.Actor1Geo_Long = ga1.Geo_Long\r\n",
					"        AND e.Actor1Geo_ADM1Code = ga1.Geo_ADM1Code\r\n",
					"        AND e.Actor1Geo_FeatureID = ga1.Geo_FeatureID\r\n",
					"    LEFT JOIN Geo ga2\r\n",
					"        ON e.Actor2Geo_Lat = ga2.Geo_Lat\r\n",
					"        AND e.Actor2Geo_Long = ga2.Geo_Long\r\n",
					"        AND e.Actor2Geo_ADM1Code = ga2.Geo_ADM1Code\r\n",
					"        AND e.Actor2Geo_FeatureID = ga2.Geo_FeatureID\r\n",
					"    LEFT JOIN Geo ga\r\n",
					"        ON e.ActionGeo_Lat = ga.Geo_Lat\r\n",
					"        AND e.ActionGeo_Long = ga.Geo_Long\r\n",
					"        AND e.ActionGeo_ADM1Code = ga.Geo_ADM1Code\r\n",
					"        AND e.ActionGeo_FeatureID = ga.Geo_FeatureID\r\n",
					"    LIMIT 10\r\n",
					"\"\"\")\r\n",
					"\r\n",
					"df_events_wactorkeys.createOrReplaceTempView('EventNoGeoKeys')\r\n",
					"\r\n",
					"display(df_events_wkeys)"
				],
				"execution_count": null
			}
		]
	}
}