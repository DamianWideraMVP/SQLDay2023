{
	"name": "load_raw_authorization_akv",
	"properties": {
		"folder": {
			"name": "01 Load raw data/utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smallpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "61cd56b8-c86b-48d5-9e97-5b101b28190b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
				"name": "smallpool",
				"type": "Spark",
				"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\n",
					"import requests\n",
					"import pandas as pd\n",
					"import zipfile\n",
					"import io\n",
					"from datetime import datetime, timedelta\n",
					"\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/configuration/configuration_parameters_local_akv"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_configuration():\n",
					"    return PARAMETERS.DATALAKE, PARAMETERS.SASKEY, PARAMETERS.CONTAINER, PARAMETERS.URL"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_blob_service_client_sas( account: str, sas_token: str) -> BlobServiceClient:\n",
					"    account_url = account\n",
					"    credential = sas_token\n",
					"    blob_service_client = BlobServiceClient(account_url, credential=credential)\n",
					"\n",
					"    return blob_service_client"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _send_data_to_blob (container_client: ContainerClient, fileName:str):\n",
					"    url = url_base+fileName\n",
					"\n",
					"\n",
					"    print (f'url: {url}')\n",
					"\n",
					"    file = fileName.split('.')[0]\n",
					"    file_to_save = file +'.'+file_extension\n",
					"\n",
					"    r = requests.get(url, allow_redirects=True)\n",
					"    zipDocument = zipfile.ZipFile(io.BytesIO(r.content))  \n",
					"    \n",
					"    listOfFileNames = zipDocument.namelist()\n",
					"\n",
					"    for file in listOfFileNames:\n",
					"        tmp = zipDocument.extract(file)\n",
					"        print (f'file: {file}, p={tmp}')\n",
					"\n",
					"        f = open (tmp,\"r\")\n",
					"        content = f.read()\n",
					"\n",
					"        blob_client = container_client.upload_blob(name=file, data=content, overwrite=True, blob_type=\"BlockBlob\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _create_nested_container_client(blob_service_client: BlobServiceClient, container_name: str, subfolder: str) -> ContainerClient:\n",
					"    new_name_for_container = container_name + \"/\" + subfolder[0:6]\n",
					"    return blob_service_client.get_container_client(container=new_name_for_container)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upload_blob_file_for_dates(blob_service_client: BlobServiceClient, container_name: str, date_start:str, date_end:str):\n",
					"    '''date_start and date_end in format YYYY-MM-DD'''\n",
					"\n",
					"    for dt in pd.period_range(start=date_start, end=date_end, freq='D'):\n",
					"        dt_str = str(dt).replace(\"-\",\"\")+'.export.CSV.zip'\n",
					"\n",
					"        container_client = _create_nested_container_client(blob_service_client, container_name, dt_str)\n",
					"        \n",
					"        _send_data_to_blob(container_client,dt_str)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upload_last_X_days(blob_service_client: BlobServiceClient, container_name: str, days: int):\n",
					"    \n",
					"    end_date = (datetime.today() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n",
					"    start_date = (datetime.today() - timedelta(days=days)).strftime(\"%Y-%m-%d\")\n",
					"\n",
					"    upload_blob_file_for_dates(blob_service_client, container_name,start_date,end_date )\n",
					""
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"account ,sas_token, container, url_base = get_configuration()\n",
					"\n",
					"file_extension = 'csv'"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"bsc = get_blob_service_client_sas(account,sas_token)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"upload_last_X_days(bsc,container,7)"
				],
				"execution_count": 16
			}
		]
	}
}