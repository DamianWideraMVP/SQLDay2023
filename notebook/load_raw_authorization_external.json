{
	"name": "load_raw_authorization_external",
	"properties": {
		"folder": {
			"name": "03 Azure Storage"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smallpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "642cd488-f3a7-4c07-9369-7770c26999b2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
				"name": "smallpool",
				"type": "Spark",
				"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\n",
					"import requests\n",
					"import io\n",
					"from datetime import datetime, timedelta\n",
					"\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"source": [
					"%run \"03 Azure Storage/configuration/configuration_parameters\"\n",
					""
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _get_configuration():\n",
					"    return PARAMETERS.SRC_DATALAKE, PARAMETERS.SRC_CONTAINER, PARAMETERS.SRC_SASKEY, PARAMETERS.RAW_DATALAKE, PARAMETERS.RAW_CONTAINER, PARAMETERS.RAW_SASKEY"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_blob_service_client( account: str, sas_token: str) -> BlobServiceClient:\n",
					"    account_url = account\n",
					"    credential = sas_token\n",
					"    blob_service_client = BlobServiceClient(account_url, credential=credential)\n",
					"\n",
					"    return blob_service_client"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _get_container_client(blob_service_client: BlobServiceClient, url: str, secret: str) -> ContainerClient:\n",
					"\n",
					"    sas_key = secret\n",
					"    if '?' not in sas_key:\n",
					"        sas_key = '?'+sas_key\n",
					"    container_client = ContainerClient.from_container_url(url+sas_key)\n",
					"    return container_client"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"src_account, src_container, src_sas_token, raw_account, raw_container, raw_sas_token = _get_configuration()"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_bsc = get_blob_service_client (src_account, src_container)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"raw_bsc = get_blob_service_client (raw_account, raw_container)"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def _prepare_paths_for_data_processing (src_account: str,raw_account: str, src_container: str, raw_container: str, folder: str, file_name: str):\n",
					"\n",
					"    #https://itechdayadla.blob.core.windows.net/demolearn/Logfiles/Log1.json\n",
					"    #abfss://raw@sqlday2023.dfs.core.windows.net/customer/part-00000-tid-3200334632332214470-9b4dec79-7e2e-495d-8657-3b5457ed3753-108-1-c000.csv\n",
					"\n",
					"\n",
					"    src_account_for_abfss = src_account.split('://')[-1].replace(\"blob\",\"dfs\")\n",
					"    raw_account_for_abfss = raw_account.split('://')[-1].replace(\"blob\",\"dfs\")\n",
					"        \n",
					"    path_to_blob_src = \"abfss://\" + src_container + \"@\" + src_account_for_abfss+\"/\"+ folder +\"/\"+file_name\n",
					"    path_to_blob_raw = \"abfss://\" + raw_container + \"@\" + raw_account_for_abfss+\"/\"+ folder\n",
					"\n",
					"    return src_account_for_abfss, raw_account_for_abfss, path_to_blob_src, path_to_blob_raw"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"folder = \"Logfiles\"\n",
					"full_path_src = src_account + \"/\" + src_container \n",
					"full_path_raw = raw_account + \"/\" + raw_container + \"/\" + folder\n",
					"\n",
					"src_container_client = _get_container_client(source_bsc, full_path_src, src_sas_token)\n",
					"raw_container_client = _get_container_client(raw_bsc,full_path_raw, raw_sas_token )\n",
					"\n",
					"blob_list = src_container_client.list_blobs(name_starts_with=folder) \n",
					"\n",
					"\n",
					"for item in blob_list:\n",
					"    blob = os.path.basename(item.name )\n",
					"\n",
					"    src_account_for_abfss, raw_account_for_abfss, path_to_blob_src, path_to_blob_raw = _prepare_paths_for_data_processing(src_account,raw_account ,src_container, raw_container, folder, blob)\n",
					"\n",
					"    if 'json' in path_to_blob_src:\n",
					"        print (path_to_blob_src)        \n",
					"        df = spark.read.load(path_to_blob_src, format='json')\n",
					"        df.write.mode(\"append\").json(path_to_blob_raw)\n",
					"        \n",
					"\n",
					""
				],
				"execution_count": 28
			}
		]
	}
}