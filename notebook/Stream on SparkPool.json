{
	"name": "Stream on SparkPool",
	"properties": {
		"folder": {
			"name": "04 Azure Synapse Analytics"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smallpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f37e13e1-f193-44d1-a191-28ce9561cbf4"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
				"name": "smallpool",
				"type": "Spark",
				"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils\n",
					"\n",
					"from pyspark.sql.functions import *\n",
					"from pyspark.sql.types import *\n",
					"\n",
					"from pyspark.sql import SparkSession"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logFilePath = \"abfss://raw@sqlday2023.dfs.core.windows.net/Logfiles/\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"files = mssparkutils.fs.ls(logFilePath)\n",
					"for file in files:\n",
					"    print(file.name, file.isDir, file.isFile, file.path, file.size)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logSchema = StructType(\n",
					"    [StructField(\"source\", StringType(), True), \n",
					"    StructField(\"data\", StringType(), True), \n",
					"    StructField(\"IP\", StringType(), True), \n",
					"    StructField(\"log_level\", StringType(), True),\n",
					"    StructField(\"log_type\", StringType(), True),\n",
					"    StructField(\"log_app\", StringType(), True), \n",
					"    StructField(\"log_timestamp\", TimestampType(), True) ])"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark = SparkSession \\\n",
					"    .builder \\\n",
					"    .appName(\"SQLDay 2023\") \\\n",
					"    .getOrCreate()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"LogDF = (\n",
					"  spark.read.schema(logSchema).option(\"multiline\",\"true\").json(logFilePath)\n",
					")\n",
					"\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"logCountDF = (\n",
					"  LogDF\n",
					"    .groupBy(col(\"log_type\"))       \n",
					"    .count()\n",
					")\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(logCountDF)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"streamingLogDF = (\n",
					"  spark\n",
					"    .readStream\n",
					"    .schema(logSchema)       \n",
					"    .option(\"multiline\",\"true\")\n",
					"    .option(\"maxFilesPerTrigger\", 1)\n",
					"    .json(logFilePath)\n",
					")"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"streamingDataCountDF = (\n",
					"  streamingLogDF\n",
					"    .groupBy(col(\"log_type\"))       \n",
					"    .count()\n",
					")\n",
					""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"report = (\n",
					"  streamingDataCountDF\n",
					"    .writeStream\n",
					"    .format(\"memory\")        \n",
					"    .queryName(\"counts\")    \n",
					"    .outputMode(\"complete\")  \n",
					"    .start()\n",
					")"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select * from counts"
				],
				"execution_count": 32
			}
		]
	}
}