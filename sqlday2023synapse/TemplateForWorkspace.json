{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "sqlday2023synapse"
		},
		"DemoLearn_AccountKey_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DemoLearn_AccountKey'"
		},
		"sqlday2023synapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlday2023synapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:sqlday2023synapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"DemoLearn_AKV_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://itechdayadla.dfs.core.windows.net"
		},
		"DemoLearn_AccountKey_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://itechdayadla.dfs.core.windows.net"
		},
		"SQLDay_AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://sqlday2023akv.vault.azure.net/"
		},
		"sqlday2023synapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sqlday2023.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/smallpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DemoLearn_AKV')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DemoLearn_AKV_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SQLDay_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "DemoLearnKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/SQLDay_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DemoLearn_AccountKey')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DemoLearn_AccountKey_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DemoLearn_AccountKey_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLDay_AKV')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('SQLDay_AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlday2023synapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlday2023synapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlday2023synapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sqlday2023synapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://sqlday2023.dfs.core.windows.net/bronze/202305/20230502.export.CSV',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '\\t',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 Create resources')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "02 Load to Delta"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "ac3e6617-1690-4ca6-81d0-2fc4938a57ed"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"75fa9942-e30d-4a26-bd14-e48a1b16094e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "622821008",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"15": "EDU",
												"16": "STUDENT",
												"22": "EDU",
												"25": "0",
												"26": "042",
												"27": "042",
												"28": "04",
												"29": "1",
												"30": "1.9",
												"31": "101",
												"32": "25",
												"33": "101",
												"34": "-1.82700021429762",
												"35": "0",
												"42": "4",
												"43": "Tehran, Tehran, Iran",
												"44": "IR",
												"45": "IR26",
												"46": "35.75",
												"47": "51.5148",
												"48": "10074674",
												"49": "4",
												"50": "Tehran, Tehran, Iran",
												"51": "IR",
												"52": "IR26",
												"53": "35.75",
												"54": "51.5148",
												"55": "10074674",
												"56": "20170201",
												"57": "http://wivb.com/ap/travel-ban-throws-research-academic-exchange-into-turmoil/"
											},
											{
												"0": "622821009",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"15": "EDU",
												"16": "STUDENT",
												"22": "EDU",
												"25": "0",
												"26": "042",
												"27": "042",
												"28": "04",
												"29": "1",
												"30": "1.9",
												"31": "24",
												"32": "24",
												"33": "24",
												"34": "-1.84496636646365",
												"35": "0",
												"42": "3",
												"43": "Stanford University, California, United States",
												"44": "US",
												"45": "USCA",
												"46": "37.4289",
												"47": "-122.17",
												"48": "235365",
												"49": "3",
												"50": "Stanford University, California, United States",
												"51": "US",
												"52": "USCA",
												"53": "37.4289",
												"54": "-122.17",
												"55": "235365",
												"56": "20170201",
												"57": "http://wivb.com/ap/travel-ban-throws-research-academic-exchange-into-turmoil/"
											},
											{
												"0": "622821010",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"5": "AGR",
												"6": "FARMER",
												"12": "AGR",
												"25": "1",
												"26": "010",
												"27": "010",
												"28": "01",
												"29": "1",
												"30": "0.0",
												"31": "5",
												"32": "1",
												"33": "5",
												"34": "-1.45631067961165",
												"35": "4",
												"36": "Nabiac, New South Wales, Australia",
												"37": "AS",
												"38": "AS02",
												"39": "-32.0984",
												"40": "152.376",
												"41": "-1590593",
												"42": "0",
												"49": "4",
												"50": "Nabiac, New South Wales, Australia",
												"51": "AS",
												"52": "AS02",
												"53": "-32.0984",
												"54": "152.376",
												"55": "-1590593",
												"56": "20170201",
												"57": "http://www.theland.com.au/story/4438400/dairy-farmers-to-share-their-anguish/?cs=4963"
											},
											{
												"0": "622821011",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"5": "AUS",
												"6": "AUSTRALIA",
												"7": "AUS",
												"15": "RUS",
												"16": "RUSSIAN",
												"17": "RUS",
												"25": "1",
												"26": "060",
												"27": "060",
												"28": "06",
												"29": "2",
												"30": "6.0",
												"31": "20",
												"32": "2",
												"33": "20",
												"34": "1.75438596491228",
												"35": "4",
												"36": "Winchendonvale, New South Wales, Australia",
												"37": "AS",
												"38": "AS02",
												"39": "-34.7",
												"40": "147.383",
												"41": "-1609959",
												"42": "1",
												"43": "Russia",
												"44": "RS",
												"45": "RS",
												"46": "60",
												"47": "100",
												"48": "RS",
												"49": "4",
												"50": "Winchendonvale, New South Wales, Australia",
												"51": "AS",
												"52": "AS02",
												"53": "-34.7",
												"54": "147.383",
												"55": "-1609959",
												"56": "20170201",
												"57": "http://www.southernweekly.com.au/story/4439619/lessons-to-be-learned-from-us-farmers/?cs=1506"
											},
											{
												"0": "622821012",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"5": "CVL",
												"6": "ENGINEER",
												"12": "CVL",
												"25": "1",
												"26": "080",
												"27": "080",
												"28": "08",
												"29": "2",
												"30": "5.0",
												"31": "6",
												"32": "1",
												"33": "6",
												"34": "0.58479532163743",
												"35": "1",
												"36": "Peru",
												"37": "PE",
												"38": "PE",
												"39": "-10",
												"40": "-76",
												"41": "PE",
												"42": "0",
												"49": "1",
												"50": "Peru",
												"51": "PE",
												"52": "PE",
												"53": "-10",
												"54": "-76",
												"55": "PE",
												"56": "20170201",
												"57": "http://www.gazette-news.co.uk/news/15057773.Intrepid_biker_raises___6_000_for_charity_on_his_round_the_world_trip/"
											},
											{
												"0": "622821013",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"5": "CVL",
												"6": "POPULATION",
												"12": "CVL",
												"25": "0",
												"26": "190",
												"27": "190",
												"28": "19",
												"29": "4",
												"30": "-10.0",
												"31": "5",
												"32": "1",
												"33": "5",
												"34": "-7.52212389380531",
												"35": "4",
												"36": "Quebec, Quebec, Canada",
												"37": "CA",
												"38": "CA10",
												"39": "47.5",
												"40": "-72",
												"41": "-571850",
												"42": "0",
												"49": "4",
												"50": "Quebec, Quebec, Canada",
												"51": "CA",
												"52": "CA10",
												"53": "47.5",
												"54": "-72",
												"55": "-571850",
												"56": "20170201",
												"57": "http://www.wfmynews2.com/news/nation-now/details-emerging-about-quebec-mosque-shooting-suspect/395086960"
											},
											{
												"0": "622821014",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"5": "CVL",
												"6": "NATIVES",
												"12": "CVL",
												"15": "GOV",
												"16": "GOVERNMENT OFFICIAL",
												"22": "GOV",
												"25": "0",
												"26": "010",
												"27": "010",
												"28": "01",
												"29": "1",
												"30": "0.0",
												"31": "54",
												"32": "15",
												"33": "54",
												"34": "-4.19911177717085",
												"35": "4",
												"36": "Astana, Gorod Astana, Kazakhstan",
												"37": "KZ",
												"38": "KZ05",
												"39": "51.1811",
												"40": "71.4278",
												"41": "-2334218",
												"42": "1",
												"43": "Syria",
												"44": "SY",
												"45": "SY",
												"46": "35",
												"47": "38",
												"48": "SY",
												"49": "4",
												"50": "Astana, Gorod Astana, Kazakhstan",
												"51": "KZ",
												"52": "KZ05",
												"53": "51.1811",
												"54": "71.4278",
												"55": "-2334218",
												"56": "20170201",
												"57": "http://www.theindependent.com/news/world/un-postpones-syria-political-talks-until-feb/article_72952422-3f9b-5e1c-b08d-d422cd5979c7.html"
											},
											{
												"0": "622821015",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"5": "CVL",
												"6": "NATIVES",
												"12": "CVL",
												"15": "GOV",
												"16": "GOVERNMENT OFFICIAL",
												"22": "GOV",
												"25": "0",
												"26": "010",
												"27": "010",
												"28": "01",
												"29": "1",
												"30": "0.0",
												"31": "24",
												"32": "8",
												"33": "24",
												"34": "-3.88262358199067",
												"35": "4",
												"36": "Beirut, Beyrouth, Lebanon",
												"37": "LE",
												"38": "LE04",
												"39": "33.8719",
												"40": "35.5097",
												"41": "-801546",
												"42": "4",
												"43": "Beirut, Beyrouth, Lebanon",
												"44": "LE",
												"45": "LE04",
												"46": "33.8719",
												"47": "35.5097",
												"48": "-801546",
												"49": "4",
												"50": "Beirut, Beyrouth, Lebanon",
												"51": "LE",
												"52": "LE04",
												"53": "33.8719",
												"54": "35.5097",
												"55": "-801546",
												"56": "20170201",
												"57": "http://www.kfbb.com/story/34385952/un-postpones-syria-political-talks-until-feb-20"
											},
											{
												"0": "622821016",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"5": "CVL",
												"6": "NATIVES",
												"12": "CVL",
												"15": "GOV",
												"16": "GOVERNMENT OFFICIAL",
												"22": "GOV",
												"25": "1",
												"26": "010",
												"27": "010",
												"28": "01",
												"29": "1",
												"30": "0.0",
												"31": "438",
												"32": "81",
												"33": "438",
												"34": "-4.1625906495832",
												"35": "1",
												"36": "Syria",
												"37": "SY",
												"38": "SY",
												"39": "35",
												"40": "38",
												"41": "SY",
												"42": "1",
												"43": "Syria",
												"44": "SY",
												"45": "SY",
												"46": "35",
												"47": "38",
												"48": "SY",
												"49": "1",
												"50": "Syria",
												"51": "SY",
												"52": "SY",
												"53": "35",
												"54": "38",
												"55": "SY",
												"56": "20170201",
												"57": "http://www.kfbb.com/story/34385952/un-postpones-syria-political-talks-until-feb-20"
											},
											{
												"0": "622821017",
												"1": "20160202",
												"2": "201602",
												"3": "2016",
												"4": "2016.0877",
												"5": "EDU",
												"6": "STUDENT",
												"12": "EDU",
												"25": "0",
												"26": "043",
												"27": "043",
												"28": "04",
												"29": "1",
												"30": "2.8",
												"31": "101",
												"32": "25",
												"33": "101",
												"34": "-1.82700021429762",
												"35": "4",
												"36": "Tehran, Tehran, Iran",
												"37": "IR",
												"38": "IR26",
												"39": "35.75",
												"40": "51.5148",
												"41": "10074674",
												"42": "0",
												"49": "4",
												"50": "Tehran, Tehran, Iran",
												"51": "IR",
												"52": "IR26",
												"53": "35.75",
												"54": "51.5148",
												"55": "10074674",
												"56": "20170201",
												"57": "http://wivb.com/ap/travel-ban-throws-research-academic-exchange-into-turmoil/"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "_c0",
												"type": "string"
											},
											{
												"key": "1",
												"name": "_c1",
												"type": "string"
											},
											{
												"key": "2",
												"name": "_c2",
												"type": "string"
											},
											{
												"key": "3",
												"name": "_c3",
												"type": "string"
											},
											{
												"key": "4",
												"name": "_c4",
												"type": "string"
											},
											{
												"key": "5",
												"name": "_c5",
												"type": "string"
											},
											{
												"key": "6",
												"name": "_c6",
												"type": "string"
											},
											{
												"key": "7",
												"name": "_c7",
												"type": "string"
											},
											{
												"key": "8",
												"name": "_c8",
												"type": "string"
											},
											{
												"key": "9",
												"name": "_c9",
												"type": "string"
											},
											{
												"key": "10",
												"name": "_c10",
												"type": "string"
											},
											{
												"key": "11",
												"name": "_c11",
												"type": "string"
											},
											{
												"key": "12",
												"name": "_c12",
												"type": "string"
											},
											{
												"key": "13",
												"name": "_c13",
												"type": "string"
											},
											{
												"key": "14",
												"name": "_c14",
												"type": "string"
											},
											{
												"key": "15",
												"name": "_c15",
												"type": "string"
											},
											{
												"key": "16",
												"name": "_c16",
												"type": "string"
											},
											{
												"key": "17",
												"name": "_c17",
												"type": "string"
											},
											{
												"key": "18",
												"name": "_c18",
												"type": "string"
											},
											{
												"key": "19",
												"name": "_c19",
												"type": "string"
											},
											{
												"key": "20",
												"name": "_c20",
												"type": "string"
											},
											{
												"key": "21",
												"name": "_c21",
												"type": "string"
											},
											{
												"key": "22",
												"name": "_c22",
												"type": "string"
											},
											{
												"key": "23",
												"name": "_c23",
												"type": "string"
											},
											{
												"key": "24",
												"name": "_c24",
												"type": "string"
											},
											{
												"key": "25",
												"name": "_c25",
												"type": "string"
											},
											{
												"key": "26",
												"name": "_c26",
												"type": "string"
											},
											{
												"key": "27",
												"name": "_c27",
												"type": "string"
											},
											{
												"key": "28",
												"name": "_c28",
												"type": "string"
											},
											{
												"key": "29",
												"name": "_c29",
												"type": "string"
											},
											{
												"key": "30",
												"name": "_c30",
												"type": "string"
											},
											{
												"key": "31",
												"name": "_c31",
												"type": "string"
											},
											{
												"key": "32",
												"name": "_c32",
												"type": "string"
											},
											{
												"key": "33",
												"name": "_c33",
												"type": "string"
											},
											{
												"key": "34",
												"name": "_c34",
												"type": "string"
											},
											{
												"key": "35",
												"name": "_c35",
												"type": "string"
											},
											{
												"key": "36",
												"name": "_c36",
												"type": "string"
											},
											{
												"key": "37",
												"name": "_c37",
												"type": "string"
											},
											{
												"key": "38",
												"name": "_c38",
												"type": "string"
											},
											{
												"key": "39",
												"name": "_c39",
												"type": "string"
											},
											{
												"key": "40",
												"name": "_c40",
												"type": "string"
											},
											{
												"key": "41",
												"name": "_c41",
												"type": "string"
											},
											{
												"key": "42",
												"name": "_c42",
												"type": "string"
											},
											{
												"key": "43",
												"name": "_c43",
												"type": "string"
											},
											{
												"key": "44",
												"name": "_c44",
												"type": "string"
											},
											{
												"key": "45",
												"name": "_c45",
												"type": "string"
											},
											{
												"key": "46",
												"name": "_c46",
												"type": "string"
											},
											{
												"key": "47",
												"name": "_c47",
												"type": "string"
											},
											{
												"key": "48",
												"name": "_c48",
												"type": "string"
											},
											{
												"key": "49",
												"name": "_c49",
												"type": "string"
											},
											{
												"key": "50",
												"name": "_c50",
												"type": "string"
											},
											{
												"key": "51",
												"name": "_c51",
												"type": "string"
											},
											{
												"key": "52",
												"name": "_c52",
												"type": "string"
											},
											{
												"key": "53",
												"name": "_c53",
												"type": "string"
											},
											{
												"key": "54",
												"name": "_c54",
												"type": "string"
											},
											{
												"key": "55",
												"name": "_c55",
												"type": "string"
											},
											{
												"key": "56",
												"name": "_c56",
												"type": "string"
											},
											{
												"key": "57",
												"name": "_c57",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
						"name": "smallpool",
						"type": "Spark",
						"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"src_location = 'abfss://bronze@sqlday2023.dfs.core.windows.net/201*/*.CSV'\r\n",
							"dst_location = 'abfss://silver@sqlday2023.dfs.core.windows.net/gdeltevents/history/'"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df_events = spark.read.load(src_location, format='csv'\r\n",
							"## If header exists uncomment line below\r\n",
							"##, header=True\r\n",
							", sep = '\\t'\r\n",
							")\r\n",
							"display(df_events.limit(10))"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_events = df_events.toDF('GlobalEventID'\r\n",
							",'Day'\r\n",
							",'MonthYear'\r\n",
							",'Year'\r\n",
							",'FractionDate'\r\n",
							",'Actor1Code'\r\n",
							",'Actor1Name'\r\n",
							",'Actor1CountryCode'\r\n",
							",'Actor1KnownGroupCode'\r\n",
							",'Actor1EthnicCode'\r\n",
							",'Actor1Religion1Code'\r\n",
							",'Actor1Religion2Code'\r\n",
							",'Actor1Type1Code'\r\n",
							",'Actor1Type2Code'\r\n",
							",'Actor1Type3Code'\r\n",
							",'Actor2Code'\r\n",
							",'Actor2Name'\r\n",
							",'Actor2CountryCode'\r\n",
							",'Actor2KnownGroupCode'\r\n",
							",'Actor2EthnicCode'\r\n",
							",'Actor2Religion1Code'\r\n",
							",'Actor2Religion2Code'\r\n",
							",'Actor2Type1Code'\r\n",
							",'Actor2Type2Code'\r\n",
							",'Actor2Type3Code'\r\n",
							",'IsRootEvent'\r\n",
							",'EventCode'\r\n",
							",'EventBaseCode'\r\n",
							",'EventRootCode'\r\n",
							",'QuadClass'\r\n",
							",'GoldsteinScale'\r\n",
							",'NumMentions'\r\n",
							",'NumSources'\r\n",
							",'NumArticles'\r\n",
							",'AvgTone'\r\n",
							",'Actor1Geo_Type'\r\n",
							",'Actor1Geo_Fullname'\r\n",
							",'Actor1Geo_CountryCode'\r\n",
							",'Actor1Geo_ADM1Code'\r\n",
							",'Actor1Geo_Lat'\r\n",
							",'Actor1Geo_Long'\r\n",
							",'Actor1Geo_FeatureID'\r\n",
							",'Actor2Geo_Type'\r\n",
							",'Actor2Geo_Fullname'\r\n",
							",'Actor2Geo_CountryCode'\r\n",
							",'Actor2Geo_ADM1Code'\r\n",
							",'Actor2Geo_Lat'\r\n",
							",'Actor2Geo_Long'\r\n",
							",'Actor2Geo_FeatureID'\r\n",
							",'ActionGeo_Type'\r\n",
							",'ActionGeo_Fullname'\r\n",
							",'ActionGeo_CountryCode'\r\n",
							",'ActionGeo_ADM1Code'\r\n",
							",'ActionGeo_Lat'\r\n",
							",'ActionGeo_Long'\r\n",
							",'ActionGeo_FeatureID'\r\n",
							",'DATEADDED'\r\n",
							",'SOURCEURL')\r\n",
							"# df_events.columns = new_column_names\r\n",
							"print(df_events.columns)"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_events.write.option(\"path\", dst_location).format(\"delta\").save()"
						],
						"outputs": [],
						"execution_count": 37
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Authorization external')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "271c3b26-9457-4136-aa29-138248319c50"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%run utils/configuration_parameters"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Authorization self')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fda98a33-a572-4a7b-a054-23e13c649d05"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LoadData do not use on sqlday')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "other"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1b2c7194-d592-463b-8918-0b00d56f3e25"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
						"name": "smallpool",
						"type": "Spark",
						"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"pip install zipfile36"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\r\n",
							"import requests\r\n",
							"import pandas as pd\r\n",
							"import zipfile\r\n",
							"import io\r\n",
							"from datetime import datetime, timedelta"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sas_token = f'sp=racwdlm&st=2023-04-22T21:20:01Z&se=2023-05-31T05:20:01Z&spr=https&sv=2021-12-02&sr=c&sig=7Hb04rR6uzijvOjHdc70Xt9vyt4iEPx5i3AnoE20f%2Fg%3D'\r\n",
							"account = 'https://sqlday2023.blob.core.windows.net'\r\n",
							"url_base = 'http://data.gdeltproject.org/events/'\r\n",
							"container = 'data'\r\n",
							"unizpped_container = 'data/unizpped'\r\n",
							"file_extension = 'csv'"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_blob_service_client_sas( account, sas_token):\r\n",
							"    account_url = account\r\n",
							"    credential = sas_token\r\n",
							"    blob_service_client = BlobServiceClient(account_url, credential=credential)\r\n",
							"\r\n",
							"    return blob_service_client"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def send_data_to_blob (container_client: ContainerClient, fileName:str):\n",
							"    url = url_base+fileName\n",
							"\n",
							"\n",
							"    print (f'url: {url}')\n",
							"\n",
							"    file = fileName.split('.')[0]\n",
							"    file_to_save = file +'.'+file_extension\n",
							"\n",
							"    r = requests.get(url, allow_redirects=True)\n",
							"    zipDocument = zipfile.ZipFile(io.BytesIO(r.content))  \n",
							"    \n",
							"    listOfFileNames = zipDocument.namelist()\n",
							"\n",
							"    for file in listOfFileNames:\n",
							"        tmp = zipDocument.extract(file)\n",
							"        print (f'file: {file}, p={tmp}')\n",
							"\n",
							"        f = open (tmp,\"r\")\n",
							"        content = f.read()\n",
							"\n",
							"        blob_client = container_client.upload_blob(name=file, data=content, overwrite=True, blob_type=\"BlockBlob\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def _create_nested_container_client(blob_service_client: BlobServiceClient, container_name: str, subfolder: str):\n",
							"    new_name_for_container = container_name + \"/\" + subfolder[0:6]\n",
							"    return blob_service_client.get_container_client(container=new_name_for_container)\n",
							"    \n",
							"    "
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def upload_blob_file_1979_2005(blob_service_client: BlobServiceClient, container_name):\r\n",
							"    container_client = blob_service_client.get_container_client(container=container_name)\r\n",
							"\r\n",
							"    for dt in range(1979,2006,1):\r\n",
							"        dt_str = str(dt)+'.zip'\r\n",
							"        send_data_to_blob(container_client,dt_str)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def upload_blob_file_200601_201303(blob_service_client: BlobServiceClient, container_name: str):\n",
							"\n",
							"    for dt in pd.period_range(start='2006-01-01', end='2013-03-01', freq='M'):\n",
							"        dt_str = str(dt).replace(\"-\",\"\")+'.zip'\n",
							"\n",
							"        container_client = _create_nested_container_client(blob_service_client, container_name, dt_str)\n",
							"        \n",
							"        send_data_to_blob(container_client,dt_str)"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def upload_blob_file_20130401_20230331(blob_service_client: BlobServiceClient, container_name):\n",
							"    container_client = blob_service_client.get_container_client(container=container_name) \n",
							"\n",
							"    for dt in pd.period_range(start='2014-02-01', end='2023-03-31', freq='D'):\n",
							"        dt_str = str(dt).replace(\"-\",\"\")+'.export.CSV.zip'\n",
							"\n",
							"        container_client = _create_nested_container_client(blob_service_client, container_name, dt_str)\n",
							"        \n",
							"        send_data_to_blob(container_client,dt_str)"
						],
						"outputs": [],
						"execution_count": 83
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def upload_blob_file_for_dates(blob_service_client: BlobServiceClient, container_name: str, date_start:str, date_end:str):\n",
							"    '''date_start and date_end in format YYYY-MM-DD'''\n",
							"\n",
							"    for dt in pd.period_range(start=date_start, end=date_end, freq='D'):\n",
							"        dt_str = str(dt).replace(\"-\",\"\")+'.export.CSV.zip'\n",
							"\n",
							"        container_client = _create_nested_container_client(blob_service_client, container_name, dt_str)\n",
							"        \n",
							"        send_data_to_blob(container_client,dt_str)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def upload_last_X_days(blob_service_client: BlobServiceClient, container_name: str, days: int):\n",
							"    end_date = (datetime.today() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n",
							"    start_date = (datetime.today() - timedelta(days=days)).strftime(\"%Y-%m-%d\")\n",
							"\n",
							"    upload_blob_file_for_dates(blob_service_client, container_name,start_date,end_date )\n",
							"\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"bsc = get_blob_service_client_sas(account,sas_token)"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"upload_blob_file_for_dates(bsc,unizpped_container, '2023-04-20','2023-04-29')"
						],
						"outputs": [],
						"execution_count": 116
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"upload_last_X_days(bsc,unizpped_container,7)"
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Raw  data ingestion')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01 Load raw data"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a5317e93-b0c1-4b81-b335-5ea146b78595"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
						"name": "smallpool",
						"type": "Spark",
						"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\r\n",
							"import requests\r\n",
							"import pandas as pd\r\n",
							"import zipfile\r\n",
							"import io\r\n",
							"from datetime import datetime, timedelta"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#(bronze)sas_token = f'sp=racwdlmeop&st=2023-05-03T11:20:20Z&se=2023-05-31T19:20:20Z&spr=https&sv=2021-12-02&sr=c&sig=SITj%2FKFPa%2FTLJgawl6TeqABXjTpimz9WcH62TPyxKss%3D'\r\n",
							"sas_token = f'sp=racwdlmeop&st=2023-05-03T21:02:46Z&se=2023-05-31T05:02:46Z&spr=https&sv=2021-12-02&sr=c&sig=8CY7pN26Rsto5wDJoYUM4RzofvxNaozEwpZWARTqVs0%3D'\r\n",
							"account = 'https://sqlday2023.blob.core.windows.net'\r\n",
							"url_base = 'http://data.gdeltproject.org/events/'\r\n",
							"unizpped_container = 'raw'\r\n",
							"file_extension = 'csv'"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_blob_service_client_sas( account, sas_token):\r\n",
							"    account_url = account\r\n",
							"    credential = sas_token\r\n",
							"    blob_service_client = BlobServiceClient(account_url, credential=credential)\r\n",
							"\r\n",
							"    return blob_service_client"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def send_data_to_blob (container_client: ContainerClient, fileName:str):\n",
							"    url = url_base+fileName\n",
							"\n",
							"\n",
							"    print (f'url: {url}')\n",
							"\n",
							"    file = fileName.split('.')[0]\n",
							"    file_to_save = file +'.'+file_extension\n",
							"\n",
							"    r = requests.get(url, allow_redirects=True)\n",
							"    zipDocument = zipfile.ZipFile(io.BytesIO(r.content))  \n",
							"    \n",
							"    listOfFileNames = zipDocument.namelist()\n",
							"\n",
							"    for file in listOfFileNames:\n",
							"        tmp = zipDocument.extract(file)\n",
							"        print (f'file: {file}, p={tmp}')\n",
							"\n",
							"        f = open (tmp,\"r\")\n",
							"        content = f.read()\n",
							"\n",
							"        blob_client = container_client.upload_blob(name=file, data=content, overwrite=True, blob_type=\"BlockBlob\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def _create_nested_container_client(blob_service_client: BlobServiceClient, container_name: str, subfolder: str):\n",
							"    new_name_for_container = container_name + \"/\" + subfolder[0:6]\n",
							"    return blob_service_client.get_container_client(container=new_name_for_container)\n",
							"    \n",
							"    "
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def upload_blob_file_for_dates(blob_service_client: BlobServiceClient, container_name: str, date_start:str, date_end:str):\n",
							"    '''date_start and date_end in format YYYY-MM-DD'''\n",
							"\n",
							"    for dt in pd.period_range(start=date_start, end=date_end, freq='D'):\n",
							"        dt_str = str(dt).replace(\"-\",\"\")+'.export.CSV.zip'\n",
							"\n",
							"        container_client = _create_nested_container_client(blob_service_client, container_name, dt_str)\n",
							"        \n",
							"        send_data_to_blob(container_client,dt_str)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def upload_last_X_days(blob_service_client: BlobServiceClient, container_name: str, days: int):\n",
							"    \n",
							"    end_date = (datetime.today() - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n",
							"    start_date = (datetime.today() - timedelta(days=days)).strftime(\"%Y-%m-%d\")\n",
							"\n",
							"    upload_blob_file_for_dates(blob_service_client, container_name,start_date,end_date )\n",
							"\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"bsc = get_blob_service_client_sas(account,sas_token)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"upload_blob_file_for_dates(bsc,unizpped_container,'2023-03-24','2023-03-31')"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"upload_last_X_days(bsc,unizpped_container,7)"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Raw to bronze')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "01 Load raw data"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "2895cfcb-c4eb-408a-a3dc-8d09c230fb49"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
						"name": "smallpool",
						"type": "Spark",
						"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"account = 'https://sqlday2023.blob.core.windows.net'\n",
							"url_base = 'http://data.gdeltproject.org/events/'\n",
							"\n",
							"bronze_sas_token = f'sp=racwdlmeop&st=2023-05-03T11:20:20Z&se=2023-05-31T19:20:20Z&spr=https&sv=2021-12-02&sr=c&sig=SITj%2FKFPa%2FTLJgawl6TeqABXjTpimz9WcH62TPyxKss%3D'\n",
							"raw_sas_token = f'sp=racwdlmeop&st=2023-05-03T21:02:46Z&se=2023-05-31T05:02:46Z&spr=https&sv=2021-12-02&sr=c&sig=8CY7pN26Rsto5wDJoYUM4RzofvxNaozEwpZWARTqVs0%3D'\n",
							"\n",
							"raw_container = 'raw'\n",
							"bronze_container = 'bronze'\n",
							"\n",
							"file_extension = 'csv'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"pip install azure-storage-file-datalake azure-identity"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/configuration_parameters')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "59baeda8-dcbd-4ef5-8411-a78f91ad1de0"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
						"name": "smallpool",
						"type": "Spark",
						"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from dataclasses import dataclass\n",
							"\n",
							"@dataclass\n",
							"class configuration_parameters:\n",
							"    DATALAKE: str\n",
							"    CONTAINER: str\n",
							"    SASKEY: str\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"PARAMETERS = configuration_parameters (\n",
							"DATALAKE=\"https://itechdayadla.dfs.core.windows.net\",\n",
							"CONTAINER=\"demolearn\",\n",
							"SASKEY=r\"?sv=2022-11-02&ss=bfqt&srt=sc&sp=rwdlacupyx&se=2023-05-31T09:27:54Z&st=2023-05-06T01:27:54Z&spr=https&sig=kvedG7707y8H%2FE8ZNsrEIOl7L2AhS3X0QEqtXi0GoJg%3D\"\n",
							")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/configuration_parameters_akv')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6a4fdc06-d83a-4981-8a22-c729a7c58543"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/f173fd35-dfcd-4ef5-902e-a0345aa77c84/resourceGroups/SQLDay2023/providers/Microsoft.Synapse/workspaces/sqlday2023synapse/bigDataPools/smallpool",
						"name": "smallpool",
						"type": "Spark",
						"endpoint": "https://sqlday2023synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": true
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/smallpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		}
	]
}